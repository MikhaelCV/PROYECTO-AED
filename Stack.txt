public class Stack<T> implements Iterable<T> {
    private Node<T> top;
    private int size;

    /**
     * Nodo interno de la pila.
     */
    private static class Node<T> {
        T data;
        Node<T> next;
        Node(T data, Node<T> next) {
            this.data = data;
            this.next = next;
        }
    }

    /**
     * Crea una pila vacía.
     */
    public Stack() {
        top = null;
        size = 0;
    }

    /**
     * Inserta un elemento en la cima de la pila.
     *
     * @param element elemento a apilar (puede ser null)
     */
    public void push(T element) {
        top = new Node<>(element, top);
        size++;
    }

    /**
     * Retira y devuelve el elemento en la cima de la pila.
     *
     * @return elemento desapilado
     * @throws EmptyStructureException si la pila está vacía
     */
    public T pop() {
        if (top == null) {
            throw new EmptyStructureException("Cannot pop from empty stack");
        }
        T value = top.data;
        top = top.next;
        size--;
        return value;
    }

    /**
     * Obtiene el elemento en la cima sin removerlo.
     *
     * @return elemento en la cima
     * @throws EmptyStructureException si la pila está vacía
     */
    public T peek() {
        if (top == null) {
            throw new EmptyStructureException("Cannot peek in empty stack");
        }
        return top.data;
    }

    /**
     * Indica si la pila está vacía.
     *
     * @return true si size == 0
     */
    public boolean isEmpty() {
        return size == 0;
    }

    /**
     * Devuelve el número de elementos en la pila.
     *
     * @return tamaño de la pila
     */
    public int size() {
        return size;
    }

    @Override
    public Iterator<T> iterator() {
        return new Iterator<T>() {
            private Node<T> current = top;

            @Override
            public boolean hasNext() {
                return current != null;
            }

            @Override
            public T next() {
                if (current == null) {
                    throw new NoSuchElementException();
                }
                T data = current.data;
                current = current.next;
                return data;
            }
        };
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append('[');
        Node<T> curr = top;
        while (curr != null) {
            sb.append(curr.data);
            if (curr.next != null) sb.append(", ");
            curr = curr.next;
        }
        sb.append(']');
        return sb.toString();
    }
}