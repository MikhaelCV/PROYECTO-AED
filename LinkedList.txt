public class LinkedList<T> implements Iterable<T> {
    private Node<T> head;
    private int size;

    /**
     * Nodo interno de la lista enlazada.
     */
    private static class Node<T> {
        T data;
        Node<T> next;
        Node(T data) { this.data = data; this.next = null; }
    }

    /**
     * Crea una lista vacía.
     */
    public LinkedList() {
        this.head = null;
        this.size = 0;
    }

    /**
     * Devuelve el número de elementos en la lista.
     *
     * @return tamaño de la lista
     */
    public int size() {
        return size;
    }

    /**
     * Indica si la lista está vacía.
     *
     * @return true si size == 0
     */
    public boolean isEmpty() {
        return size == 0;
    }

    /**
     * Agrega un elemento al final de la lista.
     *
     * @param element elemento a agregar (puede ser null)
     */
    public void add(T element) {
        Node<T> node = new Node<>(element);
        if (head == null) {
            head = node;
        } else {
            Node<T> curr = head;
            while (curr.next != null) {
                curr = curr.next;
            }
            curr.next = node;
        }
        size++;
    }

    /**
     * Inserta un elemento en la posición indicada.
     *
     * @param index   posición donde insertar (0 <= index <= size)
     * @param element elemento a insertar
     * @throws IndexOutOfBoundsException si index está fuera de rango
     */
    public void add(int index, T element) {
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
        }
        Node<T> node = new Node<>(element);
        if (index == 0) {
            node.next = head;
            head = node;
        } else {
            Node<T> curr = head;
            for (int i = 0; i < index - 1; i++) {
                curr = curr.next;
            }
            node.next = curr.next;
            curr.next = node;
        }
        size++;
    }

    /**
     * Obtiene el elemento en la posición indicada.
     *
     * @param index índice del elemento (0 <= index < size)
     * @return elemento en dicha posición
     * @throws EmptyStructureException      si la lista está vacía
     * @throws IndexOutOfBoundsException si index está fuera de rango
     */
    public T get(int index) {
        if (isEmpty()) {
            throw new EmptyStructureException("Cannot get from empty list");
        }
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
        }
        Node<T> curr = head;
        for (int i = 0; i < index; i++) {
            curr = curr.next;
        }
        return curr.data;
    }

    /**
     * Elimina el elemento en la posición indicada.
     *
     * @param index índice del elemento a eliminar (0 <= index < size)
     * @return elemento eliminado
     * @throws EmptyStructureException      si la lista está vacía
     * @throws IndexOutOfBoundsException si index está fuera de rango
     */
    public T remove(int index) {
        if (isEmpty()) {
            throw new EmptyStructureException("Cannot remove from empty list");
        }
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + size);
        }
        Node<T> removed;
        if (index == 0) {
            removed = head;
            head = head.next;
        } else {
            Node<T> curr = head;
            for (int i = 0; i < index - 1; i++) {
                curr = curr.next;
            }
            removed = curr.next;
            curr.next = removed.next;
        }
        size--;
        return removed.data;
    }

    /**
     * Elimina la primera aparición del elemento indicado.
     *
     * @param element elemento a eliminar (puede ser null)
     * @return true si se eliminó
     * @throws EmptyStructureException   si la lista está vacía
     * @throws NodeNotFoundException   si no se encuentra el elemento
     */
    public boolean remove(T element) {
        if (isEmpty()) {
            throw new EmptyStructureException("Cannot remove from empty list");
        }
        if (head.data == null ? element == null : head.data.equals(element)) {
            head = head.next;
            size--;
            return true;
        }
        Node<T> curr = head;
        while (curr.next != null && !(curr.next.data == null ? element == null : curr.next.data.equals(element))) {
            curr = curr.next;
        }
        if (curr.next == null) {
            throw new NodeNotFoundException("Element not found: " + element);
        }
        curr.next = curr.next.next;
        size--;
        return true;
    }

    /**
     * Elimina todos los elementos de la lista.
     */
    public void clear() {
        head = null;
        size = 0;
    }

    /**
     * Indica si la lista contiene el elemento indicado.
     *
     * @param element elemento a buscar
     * @return true si existe al menos una coincidencia
     */
    public boolean contains(T element) {
        return indexOf(element) >= 0;
    }

    /**
     * Devuelve la primera posición del elemento o -1 si no existe.
     *
     * @param element elemento a buscar
     * @return índice de la primera aparición o -1
     */
    public int indexOf(T element) {
        Node<T> curr = head;
        int index = 0;
        while (curr != null) {
            if (curr.data == null ? element == null : curr.data.equals(element)) {
                return index;
            }
            curr = curr.next;
            index++;
        }
        return -1;
    }

    @Override
    public Iterator<T> iterator() {
        return new Iterator<T>() {
            private Node<T> curr = head;

            @Override
            public boolean hasNext() {
                return curr != null;
            }

            @Override
            public T next() {
                if (curr == null) {
                    throw new NoSuchElementException();
                }
                T data = curr.data;
                curr = curr.next;
                return data;
            }
        };
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append('[');
        Node<T> curr = head;
        while (curr != null) {
            sb.append(curr.data);
            if (curr.next != null) sb.append(", ");
            curr = curr.next;
        }
        sb.append(']');
        return sb.toString();
    }
}