public class PriorityQueue<T extends Comparable<T>> {
    private static final int DEFAULT_CAPACITY = 16;
    private T[] heap;
    private int size;

    @SuppressWarnings("unchecked")
    public PriorityQueue() {
        this.heap = (T[]) new Comparable[DEFAULT_CAPACITY];
        this.size = 0;
    }

    /**
     * Inserta un elemento en la cola de prioridad.
     *
     * @param element elemento a insertar (no null)
     * @throws IllegalArgumentException si element es null
     */
    public void add(T element) {
        if (element == null) {
            throw new IllegalArgumentException("Cannot add null to PriorityQueue");
        }
        ensureCapacity(size + 1);
        heap[size] = element;
        siftUp(size);
        size++;
    }

    /**
     * Obtiene y elimina el elemento de mayor prioridad (mínimo).
     *
     * @return elemento mínimo
     * @throws EmptyStructureException si la cola está vacía
     */
    public T poll() {
        if (size == 0) {
            throw new EmptyStructureException("Cannot poll from empty PriorityQueue");
        }
        T result = heap[0];
        heap[0] = heap[size - 1];
        heap[size - 1] = null;
        size--;
        if (size > 0) {
            siftDown(0);
        }
        return result;
    }

    /**
     * Obtiene sin eliminar el elemento de mayor prioridad (mínimo).
     *
     * @return elemento mínimo
     * @throws EmptyStructureException si la cola está vacía
     */
    public T peek() {
        if (size == 0) {
            throw new EmptyStructureException("Cannot peek in empty PriorityQueue");
        }
        return heap[0];
    }

    /**
     * Indica si la cola de prioridad está vacía.
     *
     * @return true si size == 0
     */
    public boolean isEmpty() {
        return size == 0;
    }

    /**
     * Devuelve el número de elementos en la cola.
     *
     * @return tamaño de la cola
     */
    public int size() {
        return size;
    }

    @SuppressWarnings("unchecked")
    private void ensureCapacity(int minCapacity) {
        if (minCapacity <= heap.length) return;
        int newCapacity = heap.length * 2;
        if (newCapacity < minCapacity) newCapacity = minCapacity;
        T[] newHeap = (T[]) new Comparable[newCapacity];
        System.arraycopy(heap, 0, newHeap, 0, size);
        heap = newHeap;
    }

    private void siftUp(int index) {
        T value = heap[index];
        while (index > 0) {
            int parent = (index - 1) >>> 1;
            T parentVal = heap[parent];
            if (value.compareTo(parentVal) >= 0) {
                break;
            }
            heap[index] = parentVal;
            index = parent;
        }
        heap[index] = value;
    }

    private void siftDown(int index) {
        T value = heap[index];
        int half = size >>> 1; // nodes with children
        while (index < half) {
            int left = (index << 1) + 1;
            int right = left + 1;
            int smallest = left;
            T smallestVal = heap[left];
            if (right < size && heap[right].compareTo(smallestVal) < 0) {
                smallest = right;
                smallestVal = heap[right];
            }
            if (smallestVal.compareTo(value) >= 0) {
                break;
            }
            heap[index] = smallestVal;
            index = smallest;
        }
        heap[index] = value;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append('[');
        for (int i = 0; i < size; i++) {
            sb.append(heap[i]);
            if (i < size - 1) sb.append(", ");
        }
        sb.append(']');
        return sb.toString();
    }
}